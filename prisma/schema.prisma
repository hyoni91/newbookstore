// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid()) @db.VarChar(50)  // id 필드는 String 타입으로, 고유 값은 cuid()로 자동 생성
  password String  @db.VarChar(100)
  username String  @db.VarChar(50)
  phone    String? @db.VarChar(30) // ?는 이 필드가 null일 수 있음을 나타냄
  addr     String? @db.VarChar(50)
  email    String? @db.VarChar(100)
  role     String  @default("USER") @db.VarChar(30)  // 기본값은 "USER"
  cart Cart[] //1:N 관계 설정
  @@map("users")  // 테이블 이름을 "users"로 설정
}




model Category{
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  items Item[] //1:N 관계 설정

  @@map("category")
}

model ItemImg {
  id               Int    @id @default(autoincrement())  // 프라이머리 키
  originFileName   String
  attachedFileName String
  isMain           String
  itemId           Int    // 외래 키
  item             Item   @relation(fields: [itemId], references: [id], onDelete: Cascade) //  외래 키 관계

  @@map("item_img") 
}

model Item{
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  price Int @db.Int
  intro String? @db.VarChar(100)
  stock Int @default(20)
  status String @default("FOR_SALE")
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id]) //1:1 관계 설정 
  itemImgs ItemImg[] //1:N 관계 설정
  cart Cart[] //1:N 관계 설정 (한 개의 아이템을 여러 개의 장바구니 항목이 참조할 수 있음)

  @@map("item")
  
}


model Cart {
  id     Int      @id @default(autoincrement())
  cnt    Int      @db.Int
  itemId Int
  item   Item     @relation(fields: [itemId], references: [id])
  userId String
  user   User     @relation(fields: [userId], references: [id])
  date   DateTime @default(now())

  @@map("cart")
}